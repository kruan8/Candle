
Candle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fdc  080000c4  080000c4  000100c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080010a0  080010a0  000110a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080010a4  080010a4  000110a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000024  20000000  080010a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000028  20000024  080010cc  00020024  2**2
                  ALLOC
  6 ._user_heap_stack 00000084  2000004c  080010cc  0002004c  2**0
                  ALLOC
  7 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  8 .debug_info   000030b9  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000bcc  00000000  00000000  00023105  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000468  00000000  00000000  00023cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003f0  00000000  00000000  00024140  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00007fba  00000000  00000000  00024530  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002d24  00000000  00000000  0002c4ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0002e447  00000000  00000000  0002f20e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0005d655  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000ee0  00000000  00000000  0005d6d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c4 <__do_global_dtors_aux>:
 80000c4:	b510      	push	{r4, lr}
 80000c6:	4c06      	ldr	r4, [pc, #24]	; (80000e0 <__do_global_dtors_aux+0x1c>)
 80000c8:	7823      	ldrb	r3, [r4, #0]
 80000ca:	2b00      	cmp	r3, #0
 80000cc:	d107      	bne.n	80000de <__do_global_dtors_aux+0x1a>
 80000ce:	4b05      	ldr	r3, [pc, #20]	; (80000e4 <__do_global_dtors_aux+0x20>)
 80000d0:	2b00      	cmp	r3, #0
 80000d2:	d002      	beq.n	80000da <__do_global_dtors_aux+0x16>
 80000d4:	4804      	ldr	r0, [pc, #16]	; (80000e8 <__do_global_dtors_aux+0x24>)
 80000d6:	e000      	b.n	80000da <__do_global_dtors_aux+0x16>
 80000d8:	bf00      	nop
 80000da:	2301      	movs	r3, #1
 80000dc:	7023      	strb	r3, [r4, #0]
 80000de:	bd10      	pop	{r4, pc}
 80000e0:	20000024 	.word	0x20000024
 80000e4:	00000000 	.word	0x00000000
 80000e8:	08001088 	.word	0x08001088

080000ec <frame_dummy>:
 80000ec:	4b04      	ldr	r3, [pc, #16]	; (8000100 <frame_dummy+0x14>)
 80000ee:	b510      	push	{r4, lr}
 80000f0:	2b00      	cmp	r3, #0
 80000f2:	d003      	beq.n	80000fc <frame_dummy+0x10>
 80000f4:	4903      	ldr	r1, [pc, #12]	; (8000104 <frame_dummy+0x18>)
 80000f6:	4804      	ldr	r0, [pc, #16]	; (8000108 <frame_dummy+0x1c>)
 80000f8:	e000      	b.n	80000fc <frame_dummy+0x10>
 80000fa:	bf00      	nop
 80000fc:	bd10      	pop	{r4, pc}
 80000fe:	46c0      	nop			; (mov r8, r8)
 8000100:	00000000 	.word	0x00000000
 8000104:	20000028 	.word	0x20000028
 8000108:	08001088 	.word	0x08001088

0800010c <__udivsi3>:
 800010c:	2200      	movs	r2, #0
 800010e:	0843      	lsrs	r3, r0, #1
 8000110:	428b      	cmp	r3, r1
 8000112:	d374      	bcc.n	80001fe <__udivsi3+0xf2>
 8000114:	0903      	lsrs	r3, r0, #4
 8000116:	428b      	cmp	r3, r1
 8000118:	d35f      	bcc.n	80001da <__udivsi3+0xce>
 800011a:	0a03      	lsrs	r3, r0, #8
 800011c:	428b      	cmp	r3, r1
 800011e:	d344      	bcc.n	80001aa <__udivsi3+0x9e>
 8000120:	0b03      	lsrs	r3, r0, #12
 8000122:	428b      	cmp	r3, r1
 8000124:	d328      	bcc.n	8000178 <__udivsi3+0x6c>
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d30d      	bcc.n	8000148 <__udivsi3+0x3c>
 800012c:	22ff      	movs	r2, #255	; 0xff
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	ba12      	rev	r2, r2
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d302      	bcc.n	800013e <__udivsi3+0x32>
 8000138:	1212      	asrs	r2, r2, #8
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	d065      	beq.n	800020a <__udivsi3+0xfe>
 800013e:	0b03      	lsrs	r3, r0, #12
 8000140:	428b      	cmp	r3, r1
 8000142:	d319      	bcc.n	8000178 <__udivsi3+0x6c>
 8000144:	e000      	b.n	8000148 <__udivsi3+0x3c>
 8000146:	0a09      	lsrs	r1, r1, #8
 8000148:	0bc3      	lsrs	r3, r0, #15
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x46>
 800014e:	03cb      	lsls	r3, r1, #15
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b83      	lsrs	r3, r0, #14
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x52>
 800015a:	038b      	lsls	r3, r1, #14
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b43      	lsrs	r3, r0, #13
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x5e>
 8000166:	034b      	lsls	r3, r1, #13
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b03      	lsrs	r3, r0, #12
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x6a>
 8000172:	030b      	lsls	r3, r1, #12
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0ac3      	lsrs	r3, r0, #11
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x76>
 800017e:	02cb      	lsls	r3, r1, #11
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a83      	lsrs	r3, r0, #10
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x82>
 800018a:	028b      	lsls	r3, r1, #10
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a43      	lsrs	r3, r0, #9
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x8e>
 8000196:	024b      	lsls	r3, r1, #9
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a03      	lsrs	r3, r0, #8
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x9a>
 80001a2:	020b      	lsls	r3, r1, #8
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	d2cd      	bcs.n	8000146 <__udivsi3+0x3a>
 80001aa:	09c3      	lsrs	r3, r0, #7
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xa8>
 80001b0:	01cb      	lsls	r3, r1, #7
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0983      	lsrs	r3, r0, #6
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xb4>
 80001bc:	018b      	lsls	r3, r1, #6
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0943      	lsrs	r3, r0, #5
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xc0>
 80001c8:	014b      	lsls	r3, r1, #5
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0903      	lsrs	r3, r0, #4
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xcc>
 80001d4:	010b      	lsls	r3, r1, #4
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	08c3      	lsrs	r3, r0, #3
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xd8>
 80001e0:	00cb      	lsls	r3, r1, #3
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0883      	lsrs	r3, r0, #2
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xe4>
 80001ec:	008b      	lsls	r3, r1, #2
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0843      	lsrs	r3, r0, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xf0>
 80001f8:	004b      	lsls	r3, r1, #1
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	1a41      	subs	r1, r0, r1
 8000200:	d200      	bcs.n	8000204 <__udivsi3+0xf8>
 8000202:	4601      	mov	r1, r0
 8000204:	4152      	adcs	r2, r2
 8000206:	4610      	mov	r0, r2
 8000208:	4770      	bx	lr
 800020a:	e7ff      	b.n	800020c <__udivsi3+0x100>
 800020c:	b501      	push	{r0, lr}
 800020e:	2000      	movs	r0, #0
 8000210:	f000 f806 	bl	8000220 <__aeabi_idiv0>
 8000214:	bd02      	pop	{r1, pc}
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_uidivmod>:
 8000218:	2900      	cmp	r1, #0
 800021a:	d0f7      	beq.n	800020c <__udivsi3+0x100>
 800021c:	e776      	b.n	800010c <__udivsi3>
 800021e:	4770      	bx	lr

08000220 <__aeabi_idiv0>:
 8000220:	4770      	bx	lr
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <ADC_DeInit>:
  * @brief  Deinitializes ADC1 peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if(ADCx == ADC1)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a09      	ldr	r2, [pc, #36]	; (8000254 <ADC_DeInit+0x30>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d10b      	bne.n	800024c <ADC_DeInit+0x28>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000234:	2380      	movs	r3, #128	; 0x80
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	2101      	movs	r1, #1
 800023a:	0018      	movs	r0, r3
 800023c:	f000 fa58 	bl	80006f0 <RCC_APB2PeriphResetCmd>

    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 8000240:	2380      	movs	r3, #128	; 0x80
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	2100      	movs	r1, #0
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fa52 	bl	80006f0 <RCC_APB2PeriphResetCmd>
  }
}
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40012400 	.word	0x40012400

08000258 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_EXTERNAL_TRIG_CONV(ADC_InitStruct->ADC_ExternalTrigConv));
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign));
  assert_param(IS_ADC_SCAN_DIRECTION(ADC_InitStruct->ADC_ScanDirection)); 

  /* Get the ADCx CFGR value */
  tmpreg = ADCx->CFGR1;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	68db      	ldr	r3, [r3, #12]
 800026a:	60fb      	str	r3, [r7, #12]

  /* Clear SCANDIR, RES[1:0], ALIGN, EXTSEL[2:0], EXTEN[1:0] and CONT bits */
  tmpreg &= CFGR1_CLEAR_MASK;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	4a0f      	ldr	r2, [pc, #60]	; (80002ac <ADC_Init+0x54>)
 8000270:	4013      	ands	r3, r2
 8000272:	60fb      	str	r3, [r7, #12]
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	791b      	ldrb	r3, [r3, #4]
 800027c:	035b      	lsls	r3, r3, #13
 800027e:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	689b      	ldr	r3, [r3, #8]
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8000284:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ScanDirection);
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	691b      	ldr	r3, [r3, #16]
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 8000290:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ScanDirection);
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	695b      	ldr	r3, [r3, #20]
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8000296:	4313      	orrs	r3, r2
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	4313      	orrs	r3, r2
 800029c:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx CFGR */
  ADCx->CFGR1 = tmpreg;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	60da      	str	r2, [r3, #12]
}
 80002a4:	46c0      	nop			; (mov r8, r8)
 80002a6:	46bd      	mov	sp, r7
 80002a8:	b004      	add	sp, #16
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	ffffd203 	.word	0xffffd203

080002b0 <GPIO_Init>:
  * @note   The configured pins can be: GPIO_Pin_0 -> GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 -> GPIO_Pin_2 for GPIOD, GPIO_Pin_0 -> GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
 80002c2:	2300      	movs	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]
 80002ca:	e07c      	b.n	80003c6 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002cc:	2201      	movs	r2, #1
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	409a      	lsls	r2, r3
 80002d2:	0013      	movs	r3, r2
 80002d4:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	693a      	ldr	r2, [r7, #16]
 80002dc:	4013      	ands	r3, r2
 80002de:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	693b      	ldr	r3, [r7, #16]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d16b      	bne.n	80003c0 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	791b      	ldrb	r3, [r3, #4]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d003      	beq.n	80002f8 <GPIO_Init+0x48>
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	791b      	ldrb	r3, [r3, #4]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d134      	bne.n	8000362 <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	697a      	ldr	r2, [r7, #20]
 80002fe:	0052      	lsls	r2, r2, #1
 8000300:	2103      	movs	r1, #3
 8000302:	4091      	lsls	r1, r2
 8000304:	000a      	movs	r2, r1
 8000306:	43d2      	mvns	r2, r2
 8000308:	401a      	ands	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	689a      	ldr	r2, [r3, #8]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	795b      	ldrb	r3, [r3, #5]
 8000316:	0019      	movs	r1, r3
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	4099      	lsls	r1, r3
 800031e:	000b      	movs	r3, r1
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	889b      	ldrh	r3, [r3, #4]
 800032a:	b29b      	uxth	r3, r3
 800032c:	697a      	ldr	r2, [r7, #20]
 800032e:	b292      	uxth	r2, r2
 8000330:	0011      	movs	r1, r2
 8000332:	2201      	movs	r2, #1
 8000334:	408a      	lsls	r2, r1
 8000336:	b292      	uxth	r2, r2
 8000338:	43d2      	mvns	r2, r2
 800033a:	b292      	uxth	r2, r2
 800033c:	4013      	ands	r3, r2
 800033e:	b29a      	uxth	r2, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	889b      	ldrh	r3, [r3, #4]
 8000348:	b29a      	uxth	r2, r3
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	799b      	ldrb	r3, [r3, #6]
 800034e:	0019      	movs	r1, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	b29b      	uxth	r3, r3
 8000354:	4099      	lsls	r1, r3
 8000356:	000b      	movs	r3, r1
 8000358:	b29b      	uxth	r3, r3
 800035a:	4313      	orrs	r3, r2
 800035c:	b29a      	uxth	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	809a      	strh	r2, [r3, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	697a      	ldr	r2, [r7, #20]
 8000368:	0052      	lsls	r2, r2, #1
 800036a:	2103      	movs	r1, #3
 800036c:	4091      	lsls	r1, r2
 800036e:	000a      	movs	r2, r1
 8000370:	43d2      	mvns	r2, r2
 8000372:	401a      	ands	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	791b      	ldrb	r3, [r3, #4]
 8000380:	0019      	movs	r1, r3
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	4099      	lsls	r1, r3
 8000388:	000b      	movs	r3, r1
 800038a:	431a      	orrs	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	697a      	ldr	r2, [r7, #20]
 8000396:	b292      	uxth	r2, r2
 8000398:	0052      	lsls	r2, r2, #1
 800039a:	2103      	movs	r1, #3
 800039c:	4091      	lsls	r1, r2
 800039e:	000a      	movs	r2, r1
 80003a0:	43d2      	mvns	r2, r2
 80003a2:	401a      	ands	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	68da      	ldr	r2, [r3, #12]
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	79db      	ldrb	r3, [r3, #7]
 80003b0:	0019      	movs	r1, r3
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	4099      	lsls	r1, r3
 80003b8:	000b      	movs	r3, r1
 80003ba:	431a      	orrs	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	3301      	adds	r3, #1
 80003c4:	617b      	str	r3, [r7, #20]
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	2b0f      	cmp	r3, #15
 80003ca:	d800      	bhi.n	80003ce <GPIO_Init+0x11e>
 80003cc:	e77e      	b.n	80002cc <GPIO_Init+0x1c>
    }
  }
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	b006      	add	sp, #24
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a09      	ldr	r2, [pc, #36]	; (8000408 <GPIO_StructInit+0x30>)
 80003e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2200      	movs	r2, #0
 80003ea:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2202      	movs	r2, #2
 80003f0:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2200      	movs	r2, #0
 80003f6:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2200      	movs	r2, #0
 80003fc:	71da      	strb	r2, [r3, #7]
}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	b002      	add	sp, #8
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	0000ffff 	.word	0x0000ffff

0800040c <PWR_EnterSleepMode>:
  *             @arg PWR_SLEEPEntry_WFI: enter SLEEP mode with WFI instruction
  *             @arg PWR_SLEEPEntry_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSleepMode(uint8_t PWR_SLEEPEntry)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	0002      	movs	r2, r0
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_SLEEP_ENTRY(PWR_SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex-M0 System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <PWR_EnterSleepMode+0x30>)
 800041a:	4a08      	ldr	r2, [pc, #32]	; (800043c <PWR_EnterSleepMode+0x30>)
 800041c:	6912      	ldr	r2, [r2, #16]
 800041e:	2104      	movs	r1, #4
 8000420:	438a      	bics	r2, r1
 8000422:	611a      	str	r2, [r3, #16]
  
  /* Select SLEEP mode entry -------------------------------------------------*/
  if(PWR_SLEEPEntry == PWR_SLEEPEntry_WFI)
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d101      	bne.n	8000430 <PWR_EnterSleepMode+0x24>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800042c:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE();
  }
}
 800042e:	e000      	b.n	8000432 <PWR_EnterSleepMode+0x26>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8000430:	bf20      	wfe
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b002      	add	sp, #8
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	e000ed00 	.word	0xe000ed00

08000440 <RCC_HSI14Cmd>:
  * @note   When the HSI14 is stopped, HSI14RDY flag goes low after 6 HSI14 oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_HSI14Cmd(FunctionalState NewState)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	0002      	movs	r2, r0
 8000448:	1dfb      	adds	r3, r7, #7
 800044a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800044c:	1dfb      	adds	r3, r7, #7
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d006      	beq.n	8000462 <RCC_HSI14Cmd+0x22>
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <RCC_HSI14Cmd+0x38>)
 8000456:	4a08      	ldr	r2, [pc, #32]	; (8000478 <RCC_HSI14Cmd+0x38>)
 8000458:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800045a:	2101      	movs	r1, #1
 800045c:	430a      	orrs	r2, r1
 800045e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
  }
}
 8000460:	e005      	b.n	800046e <RCC_HSI14Cmd+0x2e>
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
 8000462:	4b05      	ldr	r3, [pc, #20]	; (8000478 <RCC_HSI14Cmd+0x38>)
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <RCC_HSI14Cmd+0x38>)
 8000466:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000468:	2101      	movs	r1, #1
 800046a:	438a      	bics	r2, r1
 800046c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b002      	add	sp, #8
 8000474:	bd80      	pop	{r7, pc}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	40021000 	.word	0x40021000

0800047c <RCC_ADCCLKConfig>:
  *             @arg RCC_ADCCLK_PCLK_Div2: ADC clock = PCLK/2
  *             @arg RCC_ADCCLK_PCLK_Div4: ADC clock = PCLK/4  
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_ADCCLK)
{ 
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));

  /* Clear ADCPRE bit */
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <RCC_ADCCLKConfig+0x48>)
 8000486:	4a0f      	ldr	r2, [pc, #60]	; (80004c4 <RCC_ADCCLKConfig+0x48>)
 8000488:	6852      	ldr	r2, [r2, #4]
 800048a:	490f      	ldr	r1, [pc, #60]	; (80004c8 <RCC_ADCCLKConfig+0x4c>)
 800048c:	400a      	ands	r2, r1
 800048e:	605a      	str	r2, [r3, #4]
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <RCC_ADCCLKConfig+0x48>)
 8000492:	4a0c      	ldr	r2, [pc, #48]	; (80004c4 <RCC_ADCCLKConfig+0x48>)
 8000494:	6851      	ldr	r1, [r2, #4]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	0412      	lsls	r2, r2, #16
 800049a:	0c12      	lsrs	r2, r2, #16
 800049c:	430a      	orrs	r2, r1
 800049e:	605a      	str	r2, [r3, #4]

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <RCC_ADCCLKConfig+0x48>)
 80004a2:	4a08      	ldr	r2, [pc, #32]	; (80004c4 <RCC_ADCCLKConfig+0x48>)
 80004a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80004a6:	4909      	ldr	r1, [pc, #36]	; (80004cc <RCC_ADCCLKConfig+0x50>)
 80004a8:	400a      	ands	r2, r1
 80004aa:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 80004ac:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <RCC_ADCCLKConfig+0x48>)
 80004ae:	4a05      	ldr	r2, [pc, #20]	; (80004c4 <RCC_ADCCLKConfig+0x48>)
 80004b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	0c12      	lsrs	r2, r2, #16
 80004b6:	430a      	orrs	r2, r1
 80004b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b002      	add	sp, #8
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	40021000 	.word	0x40021000
 80004c8:	ffffbfff 	.word	0xffffbfff
 80004cc:	fffffeff 	.word	0xfffffeff

080004d0 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	61fb      	str	r3, [r7, #28]
 80004dc:	2300      	movs	r3, #0
 80004de:	61bb      	str	r3, [r7, #24]
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	2300      	movs	r3, #0
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004ec:	4b6a      	ldr	r3, [pc, #424]	; (8000698 <RCC_GetClocksFreq+0x1c8>)
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	220c      	movs	r2, #12
 80004f2:	4013      	ands	r3, r2
 80004f4:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 80004f6:	69fb      	ldr	r3, [r7, #28]
 80004f8:	2b04      	cmp	r3, #4
 80004fa:	d007      	beq.n	800050c <RCC_GetClocksFreq+0x3c>
 80004fc:	2b08      	cmp	r3, #8
 80004fe:	d009      	beq.n	8000514 <RCC_GetClocksFreq+0x44>
 8000500:	2b00      	cmp	r3, #0
 8000502:	d131      	bne.n	8000568 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a65      	ldr	r2, [pc, #404]	; (800069c <RCC_GetClocksFreq+0x1cc>)
 8000508:	601a      	str	r2, [r3, #0]
      break;
 800050a:	e031      	b.n	8000570 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a63      	ldr	r2, [pc, #396]	; (800069c <RCC_GetClocksFreq+0x1cc>)
 8000510:	601a      	str	r2, [r3, #0]
      break;
 8000512:	e02d      	b.n	8000570 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000514:	4b60      	ldr	r3, [pc, #384]	; (8000698 <RCC_GetClocksFreq+0x1c8>)
 8000516:	685a      	ldr	r2, [r3, #4]
 8000518:	23f0      	movs	r3, #240	; 0xf0
 800051a:	039b      	lsls	r3, r3, #14
 800051c:	4013      	ands	r3, r2
 800051e:	61bb      	str	r3, [r7, #24]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000520:	4b5d      	ldr	r3, [pc, #372]	; (8000698 <RCC_GetClocksFreq+0x1c8>)
 8000522:	685a      	ldr	r2, [r3, #4]
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	025b      	lsls	r3, r3, #9
 8000528:	4013      	ands	r3, r2
 800052a:	617b      	str	r3, [r7, #20]
      pllmull = ( pllmull >> 18) + 2;
 800052c:	69bb      	ldr	r3, [r7, #24]
 800052e:	0c9b      	lsrs	r3, r3, #18
 8000530:	3302      	adds	r3, #2
 8000532:	61bb      	str	r3, [r7, #24]
      
      if (pllsource == 0x00)
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d105      	bne.n	8000546 <RCC_GetClocksFreq+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800053a:	69bb      	ldr	r3, [r7, #24]
 800053c:	4a58      	ldr	r2, [pc, #352]	; (80006a0 <RCC_GetClocksFreq+0x1d0>)
 800053e:	435a      	muls	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	601a      	str	r2, [r3, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 8000544:	e014      	b.n	8000570 <RCC_GetClocksFreq+0xa0>
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000546:	4b54      	ldr	r3, [pc, #336]	; (8000698 <RCC_GetClocksFreq+0x1c8>)
 8000548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800054a:	220f      	movs	r2, #15
 800054c:	4013      	ands	r3, r2
 800054e:	3301      	adds	r3, #1
 8000550:	613b      	str	r3, [r7, #16]
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000552:	6939      	ldr	r1, [r7, #16]
 8000554:	4851      	ldr	r0, [pc, #324]	; (800069c <RCC_GetClocksFreq+0x1cc>)
 8000556:	f7ff fdd9 	bl	800010c <__udivsi3>
 800055a:	0003      	movs	r3, r0
 800055c:	001a      	movs	r2, r3
 800055e:	69bb      	ldr	r3, [r7, #24]
 8000560:	435a      	muls	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
      break;
 8000566:	e003      	b.n	8000570 <RCC_GetClocksFreq+0xa0>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a4c      	ldr	r2, [pc, #304]	; (800069c <RCC_GetClocksFreq+0x1cc>)
 800056c:	601a      	str	r2, [r3, #0]
      break;
 800056e:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000570:	4b49      	ldr	r3, [pc, #292]	; (8000698 <RCC_GetClocksFreq+0x1c8>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	22f0      	movs	r2, #240	; 0xf0
 8000576:	4013      	ands	r3, r2
 8000578:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	091b      	lsrs	r3, r3, #4
 800057e:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8000580:	4a48      	ldr	r2, [pc, #288]	; (80006a4 <RCC_GetClocksFreq+0x1d4>)
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	18d3      	adds	r3, r2, r3
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	40da      	lsrs	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	605a      	str	r2, [r3, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8000598:	4b3f      	ldr	r3, [pc, #252]	; (8000698 <RCC_GetClocksFreq+0x1c8>)
 800059a:	685a      	ldr	r2, [r3, #4]
 800059c:	23e0      	movs	r3, #224	; 0xe0
 800059e:	00db      	lsls	r3, r3, #3
 80005a0:	4013      	ands	r3, r2
 80005a2:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	0a1b      	lsrs	r3, r3, #8
 80005a8:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80005aa:	4a3e      	ldr	r2, [pc, #248]	; (80006a4 <RCC_GetClocksFreq+0x1d4>)
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	18d3      	adds	r3, r2, r3
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	60fb      	str	r3, [r7, #12]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	685a      	ldr	r2, [r3, #4]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	40da      	lsrs	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	609a      	str	r2, [r3, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 80005c2:	4b35      	ldr	r3, [pc, #212]	; (8000698 <RCC_GetClocksFreq+0x1c8>)
 80005c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	401a      	ands	r2, r3
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d003      	beq.n	80005dc <RCC_GetClocksFreq+0x10c>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a34      	ldr	r2, [pc, #208]	; (80006a8 <RCC_GetClocksFreq+0x1d8>)
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	e013      	b.n	8000604 <RCC_GetClocksFreq+0x134>
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 80005dc:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <RCC_GetClocksFreq+0x1c8>)
 80005de:	685a      	ldr	r2, [r3, #4]
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	01db      	lsls	r3, r3, #7
 80005e4:	401a      	ands	r2, r3
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	01db      	lsls	r3, r3, #7
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d005      	beq.n	80005fa <RCC_GetClocksFreq+0x12a>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	085a      	lsrs	r2, r3, #1
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	e004      	b.n	8000604 <RCC_GetClocksFreq+0x134>
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	089a      	lsrs	r2, r3, #2
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	60da      	str	r2, [r3, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8000604:	4b24      	ldr	r3, [pc, #144]	; (8000698 <RCC_GetClocksFreq+0x1c8>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	2240      	movs	r2, #64	; 0x40
 800060a:	4013      	ands	r3, r2
 800060c:	2b40      	cmp	r3, #64	; 0x40
 800060e:	d003      	beq.n	8000618 <RCC_GetClocksFreq+0x148>
  {
    /* CEC Clock is HSI/256 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a26      	ldr	r2, [pc, #152]	; (80006ac <RCC_GetClocksFreq+0x1dc>)
 8000614:	611a      	str	r2, [r3, #16]
 8000616:	e003      	b.n	8000620 <RCC_GetClocksFreq+0x150>
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	0212      	lsls	r2, r2, #8
 800061e:	611a      	str	r2, [r3, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <RCC_GetClocksFreq+0x1c8>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	2210      	movs	r2, #16
 8000626:	4013      	ands	r3, r2
 8000628:	2b10      	cmp	r3, #16
 800062a:	d003      	beq.n	8000634 <RCC_GetClocksFreq+0x164>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a1b      	ldr	r2, [pc, #108]	; (800069c <RCC_GetClocksFreq+0x1cc>)
 8000630:	615a      	str	r2, [r3, #20]
 8000632:	e003      	b.n	800063c <RCC_GetClocksFreq+0x16c>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	615a      	str	r2, [r3, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <RCC_GetClocksFreq+0x1c8>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	2203      	movs	r2, #3
 8000642:	4013      	ands	r3, r2
 8000644:	d104      	bne.n	8000650 <RCC_GetClocksFreq+0x180>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	619a      	str	r2, [r3, #24]
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
  }

}
 800064e:	e01e      	b.n	800068e <RCC_GetClocksFreq+0x1be>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <RCC_GetClocksFreq+0x1c8>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	2203      	movs	r2, #3
 8000656:	4013      	ands	r3, r2
 8000658:	2b01      	cmp	r3, #1
 800065a:	d104      	bne.n	8000666 <RCC_GetClocksFreq+0x196>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	619a      	str	r2, [r3, #24]
}
 8000664:	e013      	b.n	800068e <RCC_GetClocksFreq+0x1be>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <RCC_GetClocksFreq+0x1c8>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	2203      	movs	r2, #3
 800066c:	4013      	ands	r3, r2
 800066e:	2b02      	cmp	r3, #2
 8000670:	d104      	bne.n	800067c <RCC_GetClocksFreq+0x1ac>
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	0212      	lsls	r2, r2, #8
 8000678:	619a      	str	r2, [r3, #24]
}
 800067a:	e008      	b.n	800068e <RCC_GetClocksFreq+0x1be>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <RCC_GetClocksFreq+0x1c8>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	2203      	movs	r2, #3
 8000682:	4013      	ands	r3, r2
 8000684:	2b03      	cmp	r3, #3
 8000686:	d102      	bne.n	800068e <RCC_GetClocksFreq+0x1be>
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a04      	ldr	r2, [pc, #16]	; (800069c <RCC_GetClocksFreq+0x1cc>)
 800068c:	619a      	str	r2, [r3, #24]
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b008      	add	sp, #32
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	40021000 	.word	0x40021000
 800069c:	007a1200 	.word	0x007a1200
 80006a0:	003d0900 	.word	0x003d0900
 80006a4:	20000000 	.word	0x20000000
 80006a8:	00d59f80 	.word	0x00d59f80
 80006ac:	00008012 	.word	0x00008012

080006b0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	000a      	movs	r2, r1
 80006ba:	1cfb      	adds	r3, r7, #3
 80006bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80006be:	1cfb      	adds	r3, r7, #3
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d006      	beq.n	80006d4 <RCC_AHBPeriphClockCmd+0x24>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <RCC_AHBPeriphClockCmd+0x3c>)
 80006c8:	4a08      	ldr	r2, [pc, #32]	; (80006ec <RCC_AHBPeriphClockCmd+0x3c>)
 80006ca:	6951      	ldr	r1, [r2, #20]
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	430a      	orrs	r2, r1
 80006d0:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80006d2:	e006      	b.n	80006e2 <RCC_AHBPeriphClockCmd+0x32>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <RCC_AHBPeriphClockCmd+0x3c>)
 80006d6:	4a05      	ldr	r2, [pc, #20]	; (80006ec <RCC_AHBPeriphClockCmd+0x3c>)
 80006d8:	6952      	ldr	r2, [r2, #20]
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	43c9      	mvns	r1, r1
 80006de:	400a      	ands	r2, r1
 80006e0:	615a      	str	r2, [r3, #20]
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40021000 	.word	0x40021000

080006f0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	000a      	movs	r2, r1
 80006fa:	1cfb      	adds	r3, r7, #3
 80006fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006fe:	1cfb      	adds	r3, r7, #3
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <RCC_APB2PeriphResetCmd+0x3c>)
 8000708:	4a08      	ldr	r2, [pc, #32]	; (800072c <RCC_APB2PeriphResetCmd+0x3c>)
 800070a:	68d1      	ldr	r1, [r2, #12]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	430a      	orrs	r2, r1
 8000710:	60da      	str	r2, [r3, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000712:	e006      	b.n	8000722 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <RCC_APB2PeriphResetCmd+0x3c>)
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <RCC_APB2PeriphResetCmd+0x3c>)
 8000718:	68d2      	ldr	r2, [r2, #12]
 800071a:	6879      	ldr	r1, [r7, #4]
 800071c:	43c9      	mvns	r1, r1
 800071e:	400a      	ands	r2, r1
 8000720:	60da      	str	r2, [r3, #12]
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	40021000 	.word	0x40021000

08000730 <RCC_GetFlagStatus>:
  *             @arg RCC_FLAG_LPWRRST: Low Power reset
  *             @arg RCC_FLAG_HSI14RDY: HSI14 oscillator clock ready  
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	0002      	movs	r2, r0
 8000738:	1dfb      	adds	r3, r7, #7
 800073a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000744:	2313      	movs	r3, #19
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	095b      	lsrs	r3, r3, #5
 8000752:	b2db      	uxtb	r3, r3
 8000754:	60fb      	str	r3, [r7, #12]

  if (tmp == 0)               /* The flag to check is in CR register */
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d103      	bne.n	8000764 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <RCC_GetFlagStatus+0x90>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	e010      	b.n	8000786 <RCC_GetFlagStatus+0x56>
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d103      	bne.n	8000772 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <RCC_GetFlagStatus+0x90>)
 800076c:	6a1b      	ldr	r3, [r3, #32]
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	e009      	b.n	8000786 <RCC_GetFlagStatus+0x56>
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2b02      	cmp	r3, #2
 8000776:	d103      	bne.n	8000780 <RCC_GetFlagStatus+0x50>
  {
    statusreg = RCC->CSR;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <RCC_GetFlagStatus+0x90>)
 800077a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	e002      	b.n	8000786 <RCC_GetFlagStatus+0x56>
  }
  else                        /* The flag to check is in CR2 register */
  {
    statusreg = RCC->CR2;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <RCC_GetFlagStatus+0x90>)
 8000782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000784:	617b      	str	r3, [r7, #20]
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	221f      	movs	r2, #31
 800078c:	4013      	ands	r3, r2
 800078e:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	40da      	lsrs	r2, r3
 8000796:	0013      	movs	r3, r2
 8000798:	2201      	movs	r2, #1
 800079a:	4013      	ands	r3, r2
 800079c:	d004      	beq.n	80007a8 <RCC_GetFlagStatus+0x78>
  {
    bitstatus = SET;
 800079e:	2313      	movs	r3, #19
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	2201      	movs	r2, #1
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	e003      	b.n	80007b0 <RCC_GetFlagStatus+0x80>
  }
  else
  {
    bitstatus = RESET;
 80007a8:	2313      	movs	r3, #19
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
 80007b0:	2313      	movs	r3, #19
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	781b      	ldrb	r3, [r3, #0]
}
 80007b6:	0018      	movs	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b006      	add	sp, #24
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40021000 	.word	0x40021000

080007c4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	0002      	movs	r2, r0
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <NVIC_EnableIRQ+0x28>)
 80007d2:	1dfa      	adds	r2, r7, #7
 80007d4:	7812      	ldrb	r2, [r2, #0]
 80007d6:	0011      	movs	r1, r2
 80007d8:	221f      	movs	r2, #31
 80007da:	400a      	ands	r2, r1
 80007dc:	2101      	movs	r1, #1
 80007de:	4091      	lsls	r1, r2
 80007e0:	000a      	movs	r2, r1
 80007e2:	601a      	str	r2, [r3, #0]
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b5b0      	push	{r4, r5, r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	0002      	movs	r2, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b7f      	cmp	r3, #127	; 0x7f
 8000804:	d932      	bls.n	800086c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000806:	4c2f      	ldr	r4, [pc, #188]	; (80008c4 <NVIC_SetPriority+0xd4>)
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	001a      	movs	r2, r3
 800080e:	230f      	movs	r3, #15
 8000810:	4013      	ands	r3, r2
 8000812:	3b08      	subs	r3, #8
 8000814:	0899      	lsrs	r1, r3, #2
 8000816:	4a2b      	ldr	r2, [pc, #172]	; (80008c4 <NVIC_SetPriority+0xd4>)
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	0018      	movs	r0, r3
 800081e:	230f      	movs	r3, #15
 8000820:	4003      	ands	r3, r0
 8000822:	3b08      	subs	r3, #8
 8000824:	089b      	lsrs	r3, r3, #2
 8000826:	3306      	adds	r3, #6
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	18d3      	adds	r3, r2, r3
 800082c:	3304      	adds	r3, #4
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	1dfa      	adds	r2, r7, #7
 8000832:	7812      	ldrb	r2, [r2, #0]
 8000834:	0010      	movs	r0, r2
 8000836:	2203      	movs	r2, #3
 8000838:	4002      	ands	r2, r0
 800083a:	00d2      	lsls	r2, r2, #3
 800083c:	20ff      	movs	r0, #255	; 0xff
 800083e:	4090      	lsls	r0, r2
 8000840:	0002      	movs	r2, r0
 8000842:	43d2      	mvns	r2, r2
 8000844:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	019b      	lsls	r3, r3, #6
 800084a:	20ff      	movs	r0, #255	; 0xff
 800084c:	4018      	ands	r0, r3
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	001d      	movs	r5, r3
 8000854:	2303      	movs	r3, #3
 8000856:	402b      	ands	r3, r5
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	4098      	lsls	r0, r3
 800085c:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800085e:	431a      	orrs	r2, r3
 8000860:	1d8b      	adds	r3, r1, #6
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	18e3      	adds	r3, r4, r3
 8000866:	3304      	adds	r3, #4
 8000868:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 800086a:	e027      	b.n	80008bc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800086c:	4c16      	ldr	r4, [pc, #88]	; (80008c8 <NVIC_SetPriority+0xd8>)
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b25b      	sxtb	r3, r3
 8000874:	089b      	lsrs	r3, r3, #2
 8000876:	4914      	ldr	r1, [pc, #80]	; (80008c8 <NVIC_SetPriority+0xd8>)
 8000878:	1dfa      	adds	r2, r7, #7
 800087a:	7812      	ldrb	r2, [r2, #0]
 800087c:	b252      	sxtb	r2, r2
 800087e:	0892      	lsrs	r2, r2, #2
 8000880:	32c0      	adds	r2, #192	; 0xc0
 8000882:	0092      	lsls	r2, r2, #2
 8000884:	5852      	ldr	r2, [r2, r1]
 8000886:	1df9      	adds	r1, r7, #7
 8000888:	7809      	ldrb	r1, [r1, #0]
 800088a:	0008      	movs	r0, r1
 800088c:	2103      	movs	r1, #3
 800088e:	4001      	ands	r1, r0
 8000890:	00c9      	lsls	r1, r1, #3
 8000892:	20ff      	movs	r0, #255	; 0xff
 8000894:	4088      	lsls	r0, r1
 8000896:	0001      	movs	r1, r0
 8000898:	43c9      	mvns	r1, r1
 800089a:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 800089c:	683a      	ldr	r2, [r7, #0]
 800089e:	0192      	lsls	r2, r2, #6
 80008a0:	20ff      	movs	r0, #255	; 0xff
 80008a2:	4010      	ands	r0, r2
 80008a4:	1dfa      	adds	r2, r7, #7
 80008a6:	7812      	ldrb	r2, [r2, #0]
 80008a8:	0015      	movs	r5, r2
 80008aa:	2203      	movs	r2, #3
 80008ac:	402a      	ands	r2, r5
 80008ae:	00d2      	lsls	r2, r2, #3
 80008b0:	4090      	lsls	r0, r2
 80008b2:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80008b4:	430a      	orrs	r2, r1
 80008b6:	33c0      	adds	r3, #192	; 0xc0
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	511a      	str	r2, [r3, r4]
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b002      	add	sp, #8
 80008c2:	bdb0      	pop	{r4, r5, r7, pc}
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	e000e100 	.word	0xe000e100

080008cc <main>:

#define APP_SYSTICK_ISR_OFF     SysTick->CTRL  &= ~SysTick_CTRL_TICKINT_Msk  // vypnout preruseni od Systick
#define APP_SYSTICK_ISR_ON      SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk   // zapnout preruseni od Systick

int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
  // SYSCLK = 8MHz/DIV
//  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV16;

  // kontrola hodin
  RCC_ClocksTypeDef RCC_Clocks;
  RCC_GetClocksFreq(&RCC_Clocks); // Get system clocks
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff fdfb 	bl	80004d0 <RCC_GetClocksFreq>

  Timer_Init();
 80008da:	f000 fa21 	bl	8000d20 <Timer_Init>
  Gpio_Init();
 80008de:	f000 f8d7 	bl	8000a90 <Gpio_Init>
  AD_Init();
 80008e2:	f000 f899 	bl	8000a18 <AD_Init>
  RTC_Init_();
 80008e6:	f000 f8f7 	bl	8000ad8 <RTC_Init_>

  Timer_Delay_ms(3000);
 80008ea:	4b49      	ldr	r3, [pc, #292]	; (8000a10 <main+0x144>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 fa21 	bl	8000d34 <Timer_Delay_ms>
  PWR_EnterSleepMode(PWR_SLEEPEntry_WFE);
 80008f2:	2002      	movs	r0, #2
 80008f4:	f7ff fd8a 	bl	800040c <PWR_EnterSleepMode>

  uint8_t nPwmCtrl = 0;		// 4 bit-Counter
 80008f8:	2327      	movs	r3, #39	; 0x27
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
  uint8_t nFrameCtrl = 0;	// 5 bit-Counter
 8000900:	2326      	movs	r3, #38	; 0x26
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]

 	uint8_t nPwmValue = 0;		// 4 bit-Register
 8000908:	2325      	movs	r3, #37	; 0x25
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
 	uint8_t nNextBright = 0;	// 4 bit-Register
 8000910:	2324      	movs	r3, #36	; 0x24
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
 	uint8_t nRand = 0;			  // 5 bit Signal
 8000918:	2323      	movs	r3, #35	; 0x23
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
 	uint8_t nRandFlag = 0;		// 1 bit Signal
 8000920:	2322      	movs	r3, #34	; 0x22
 8000922:	18fb      	adds	r3, r7, r3
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]

  while(1)
  {
    TimerUs_Delay(150);
 8000928:	2096      	movs	r0, #150	; 0x96
 800092a:	f000 fa83 	bl	8000e34 <TimerUs_Delay>
//     StopMode();

 		// PWM led
    nPwmCtrl++;
 800092e:	2327      	movs	r3, #39	; 0x27
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	781a      	ldrb	r2, [r3, #0]
 8000934:	2327      	movs	r3, #39	; 0x27
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	3201      	adds	r2, #1
 800093a:	701a      	strb	r2, [r3, #0]
 		nPwmCtrl &= 0xf;		// only 4 bit
 800093c:	2327      	movs	r3, #39	; 0x27
 800093e:	18fb      	adds	r3, r7, r3
 8000940:	2227      	movs	r2, #39	; 0x27
 8000942:	18ba      	adds	r2, r7, r2
 8000944:	7812      	ldrb	r2, [r2, #0]
 8000946:	210f      	movs	r1, #15
 8000948:	400a      	ands	r2, r1
 800094a:	701a      	strb	r2, [r3, #0]
 		if (nPwmCtrl <= nPwmValue)
 800094c:	2327      	movs	r3, #39	; 0x27
 800094e:	18fa      	adds	r2, r7, r3
 8000950:	2325      	movs	r3, #37	; 0x25
 8000952:	18fb      	adds	r3, r7, r3
 8000954:	7812      	ldrb	r2, [r2, #0]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	429a      	cmp	r2, r3
 800095a:	d804      	bhi.n	8000966 <main+0x9a>
 		{
 		  LED_ON;
 800095c:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <main+0x148>)
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	0092      	lsls	r2, r2, #2
 8000962:	619a      	str	r2, [r3, #24]
 8000964:	e003      	b.n	800096e <main+0xa2>
    }
    else
    {
      LED_OFF;
 8000966:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <main+0x148>)
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	0092      	lsls	r2, r2, #2
 800096c:	851a      	strh	r2, [r3, #40]	; 0x28
    }

 		// FRAME
 		if (nPwmCtrl == 0)
 800096e:	2327      	movs	r3, #39	; 0x27
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1d7      	bne.n	8000928 <main+0x5c>
 		{
 			nFrameCtrl++;
 8000978:	2326      	movs	r3, #38	; 0x26
 800097a:	18fb      	adds	r3, r7, r3
 800097c:	781a      	ldrb	r2, [r3, #0]
 800097e:	2326      	movs	r3, #38	; 0x26
 8000980:	18fb      	adds	r3, r7, r3
 8000982:	3201      	adds	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
 			nFrameCtrl &= 0x1f;
 8000986:	2326      	movs	r3, #38	; 0x26
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	2226      	movs	r2, #38	; 0x26
 800098c:	18ba      	adds	r2, r7, r2
 800098e:	7812      	ldrb	r2, [r2, #0]
 8000990:	211f      	movs	r1, #31
 8000992:	400a      	ands	r2, r1
 8000994:	701a      	strb	r2, [r3, #0]

 			// generate a new random number every 8 cycles. In reality this is most likely bit serial
 			if ((nFrameCtrl & 0x07) == 0)
 8000996:	2326      	movs	r3, #38	; 0x26
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2207      	movs	r2, #7
 800099e:	4013      	ands	r3, r2
 80009a0:	d117      	bne.n	80009d2 <main+0x106>
 			{
 				nRand = GetTrueRandomNumber() & 0x1f;
 80009a2:	f000 f92b 	bl	8000bfc <GetTrueRandomNumber>
 80009a6:	0003      	movs	r3, r0
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	2323      	movs	r3, #35	; 0x23
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	211f      	movs	r1, #31
 80009b0:	400a      	ands	r2, r1
 80009b2:	701a      	strb	r2, [r3, #0]
 				if ((nRand & 0x0c) != 0)
 80009b4:	2323      	movs	r3, #35	; 0x23
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	220c      	movs	r2, #12
 80009bc:	4013      	ands	r3, r2
 80009be:	d004      	beq.n	80009ca <main+0xfe>
        {
          nRandFlag = 1;
 80009c0:	2322      	movs	r3, #34	; 0x22
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	e003      	b.n	80009d2 <main+0x106>
        }
        else
        {
          nRandFlag = 0; // only update if valid
 80009ca:	2322      	movs	r3, #34	; 0x22
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
        }
 			}

			// NEW FRAME
 			if (nFrameCtrl == 0)
 80009d2:	2326      	movs	r3, #38	; 0x26
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d109      	bne.n	80009f0 <main+0x124>
 			{
 			  // reload PWM
 				nPwmValue = nNextBright;
 80009dc:	2325      	movs	r3, #37	; 0x25
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	2224      	movs	r2, #36	; 0x24
 80009e2:	18ba      	adds	r2, r7, r2
 80009e4:	7812      	ldrb	r2, [r2, #0]
 80009e6:	701a      	strb	r2, [r3, #0]

 				// force update at beginning of frame
 				nRandFlag = 1;
 80009e8:	2322      	movs	r3, #34	; 0x22
 80009ea:	18fb      	adds	r3, r7, r3
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
 			}

 			if (nRandFlag)
 80009f0:	2322      	movs	r3, #34	; 0x22
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d096      	beq.n	8000928 <main+0x5c>
 			{
 				nNextBright = nRand > 15 ? 15 : nRand;
 80009fa:	2324      	movs	r3, #36	; 0x24
 80009fc:	18fa      	adds	r2, r7, r3
 80009fe:	2323      	movs	r3, #35	; 0x23
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2d9      	uxtb	r1, r3
 8000a06:	290f      	cmp	r1, #15
 8000a08:	d900      	bls.n	8000a0c <main+0x140>
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	7013      	strb	r3, [r2, #0]
    TimerUs_Delay(150);
 8000a0e:	e78b      	b.n	8000928 <main+0x5c>
 8000a10:	00000bb8 	.word	0x00000bb8
 8000a14:	48000800 	.word	0x48000800

08000a18 <AD_Init>:
 		}
  }
}

void AD_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
  ADC_InitTypeDef ADC_InitStructure;

  // Initialize ADC 14MHz RC
  RCC_ADCCLKConfig(RCC_ADCCLK_HSI14);
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f7ff fd2c 	bl	800047c <RCC_ADCCLKConfig>
  RCC_HSI14Cmd(ENABLE);
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff fd0b 	bl	8000440 <RCC_HSI14Cmd>
  while (!RCC_GetFlagStatus(RCC_FLAG_HSI14RDY));
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	2061      	movs	r0, #97	; 0x61
 8000a2e:	f7ff fe7f 	bl	8000730 <RCC_GetFlagStatus>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d0fa      	beq.n	8000a2c <AD_Init+0x14>

  ADC_DeInit(ADC1);
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <AD_Init+0x74>)
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff fbf3 	bl	8000224 <ADC_DeInit>
  ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2200      	movs	r2, #0
 8000a42:	711a      	strb	r2, [r3, #4]
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8000a44:	003b      	movs	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8000a4a:	003b      	movs	r3, r7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
  ADC_InitStructure.ADC_ScanDirection = ADC_ScanDirection_Backward;
 8000a50:	003b      	movs	r3, r7
 8000a52:	2204      	movs	r2, #4
 8000a54:	615a      	str	r2, [r3, #20]
  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000a56:	003b      	movs	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_TRGO; //default
 8000a5c:	003b      	movs	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  ADC_Init(ADC1, &ADC_InitStructure);
 8000a62:	003b      	movs	r3, r7
 8000a64:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <AD_Init+0x74>)
 8000a66:	0019      	movs	r1, r3
 8000a68:	0010      	movs	r0, r2
 8000a6a:	f7ff fbf5 	bl	8000258 <ADC_Init>

  //Convert the ADC1 temperature sensor, user shortest sample time to generate most noise
  ADC1->CHSELR |= (uint32_t)ADC_Channel_TempSensor;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <AD_Init+0x74>)
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <AD_Init+0x74>)
 8000a72:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	0249      	lsls	r1, r1, #9
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	629a      	str	r2, [r3, #40]	; 0x28
  ADC1->SMPR = 0;     // ADC_SampleTime_1_5Cycles
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <AD_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	615a      	str	r2, [r3, #20]
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b006      	add	sp, #24
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	40012400 	.word	0x40012400

08000a90 <Gpio_Init>:

void Gpio_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef InitStruct;
  GPIO_StructInit(&InitStruct);
 8000a96:	003b      	movs	r3, r7
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff fc9d 	bl	80003d8 <GPIO_StructInit>

  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	031b      	lsls	r3, r3, #12
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff fe03 	bl	80006b0 <RCC_AHBPeriphClockCmd>

  InitStruct.GPIO_Pin = LED_PIN;
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	0092      	lsls	r2, r2, #2
 8000ab0:	601a      	str	r2, [r3, #0]
  InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	711a      	strb	r2, [r3, #4]
  InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000ab8:	003b      	movs	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	71da      	strb	r2, [r3, #7]
  GPIO_Init(LED_PORT, &InitStruct);
 8000abe:	003b      	movs	r3, r7
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <Gpio_Init+0x44>)
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	0010      	movs	r0, r2
 8000ac6:	f7ff fbf3 	bl	80002b0 <GPIO_Init>
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	48000800 	.word	0x48000800

08000ad8 <RTC_Init_>:

void RTC_Init_()
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  RCC->APB1ENR |= RCC_APB1ENR_PWREN; // Enable PWR clock
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <RTC_Init_+0xb4>)
 8000ade:	4a2b      	ldr	r2, [pc, #172]	; (8000b8c <RTC_Init_+0xb4>)
 8000ae0:	69d2      	ldr	r2, [r2, #28]
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	0549      	lsls	r1, r1, #21
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	61da      	str	r2, [r3, #28]
  RCC->CSR |= RCC_CSR_LSION; // Enable the LSI
 8000aea:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <RTC_Init_+0xb4>)
 8000aec:	4a27      	ldr	r2, [pc, #156]	; (8000b8c <RTC_Init_+0xb4>)
 8000aee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000af0:	2101      	movs	r1, #1
 8000af2:	430a      	orrs	r2, r1
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
  while(!(RCC->CSR & RCC_CSR_LSIRDY)); // Wait while it is not ready
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <RTC_Init_+0xb4>)
 8000afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afc:	2202      	movs	r2, #2
 8000afe:	4013      	ands	r3, r2
 8000b00:	d0fa      	beq.n	8000af8 <RTC_Init_+0x20>
  RTC_WriteAccess(true);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f000 f84c 	bl	8000ba0 <RTC_WriteAccess>
  RCC->BDCR = (RCC->BDCR & ~RCC_BDCR_RTCSEL) | RCC_BDCR_RTCEN | RCC_BDCR_RTCSEL_LSI;
 8000b08:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <RTC_Init_+0xb4>)
 8000b0a:	4a20      	ldr	r2, [pc, #128]	; (8000b8c <RTC_Init_+0xb4>)
 8000b0c:	6a12      	ldr	r2, [r2, #32]
 8000b0e:	4920      	ldr	r1, [pc, #128]	; (8000b90 <RTC_Init_+0xb8>)
 8000b10:	400a      	ands	r2, r1
 8000b12:	2182      	movs	r1, #130	; 0x82
 8000b14:	0209      	lsls	r1, r1, #8
 8000b16:	430a      	orrs	r2, r1
 8000b18:	621a      	str	r2, [r3, #32]
  RTC->ISR = RTC_ISR_INIT; // Enable init phase
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <RTC_Init_+0xbc>)
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	60da      	str	r2, [r3, #12]
  while((RTC->ISR & RTC_ISR_INITF) != RTC_ISR_INITF);
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <RTC_Init_+0xbc>)
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	2240      	movs	r2, #64	; 0x40
 8000b28:	4013      	ands	r3, r2
 8000b2a:	2b40      	cmp	r3, #64	; 0x40
 8000b2c:	d1f9      	bne.n	8000b22 <RTC_Init_+0x4a>

  RTC->PRER = 0x00000003;  // do RTC by melo jit 40/3 kHz
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <RTC_Init_+0xbc>)
 8000b30:	2203      	movs	r2, #3
 8000b32:	611a      	str	r2, [r3, #16]

  // nastavit alarm na hodnotu 6 impulsu z LSI -> 40kHz/6=6,5kHz (~150 us)
  RTC->ALRMAR = 2 | RTC_ALRMAR_MSK2 | RTC_ALRMAR_MSK3 | RTC_ALRMAR_MSK4;
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <RTC_Init_+0xbc>)
 8000b36:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <RTC_Init_+0xc0>)
 8000b38:	61da      	str	r2, [r3, #28]

  // povolit alarm a INT
  RTC->CR |= (RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <RTC_Init_+0xbc>)
 8000b3c:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <RTC_Init_+0xbc>)
 8000b3e:	6892      	ldr	r2, [r2, #8]
 8000b40:	2188      	movs	r1, #136	; 0x88
 8000b42:	0149      	lsls	r1, r1, #5
 8000b44:	430a      	orrs	r2, r1
 8000b46:	609a      	str	r2, [r3, #8]

  // vynulovat time registr
  RTC->TR = 0;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <RTC_Init_+0xbc>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]

  RTC->ISR =~ RTC_ISR_INIT;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <RTC_Init_+0xbc>)
 8000b50:	2281      	movs	r2, #129	; 0x81
 8000b52:	4252      	negs	r2, r2
 8000b54:	60da      	str	r2, [r3, #12]
  RTC_WriteAccess(false);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 f822 	bl	8000ba0 <RTC_WriteAccess>

  // nastavit EXTI od Alarmu
  EXTI->IMR |= EXTI_EMR_MR17;       // line 17 is connected to RTC Alarm event
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <RTC_Init_+0xc4>)
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <RTC_Init_+0xc4>)
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	0289      	lsls	r1, r1, #10
 8000b66:	430a      	orrs	r2, r1
 8000b68:	601a      	str	r2, [r3, #0]
  EXTI->RTSR |= EXTI_RTSR_TR17;     // Rising edge for line 17
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <RTC_Init_+0xc4>)
 8000b6c:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <RTC_Init_+0xc4>)
 8000b6e:	6892      	ldr	r2, [r2, #8]
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	0289      	lsls	r1, r1, #10
 8000b74:	430a      	orrs	r2, r1
 8000b76:	609a      	str	r2, [r3, #8]

  // povolit preruseni od RTC
  NVIC_SetPriority(RTC_IRQn, 0);    // Set priority
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f7ff fe38 	bl	80007f0 <NVIC_SetPriority>
  NVIC_EnableIRQ(RTC_IRQn);         // Enable RTC_IRQn
 8000b80:	2002      	movs	r0, #2
 8000b82:	f7ff fe1f 	bl	80007c4 <NVIC_EnableIRQ>
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	ffff7cff 	.word	0xffff7cff
 8000b94:	40002800 	.word	0x40002800
 8000b98:	80808002 	.word	0x80808002
 8000b9c:	40010400 	.word	0x40010400

08000ba0 <RTC_WriteAccess>:

  APP_SYSTICK_ISR_ON;
}

void RTC_WriteAccess(bool bEnable)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	0002      	movs	r2, r0
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	701a      	strb	r2, [r3, #0]
  if (bEnable)
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d00d      	beq.n	8000bd0 <RTC_WriteAccess+0x30>
  {
    // Enable write in RTC domain control register
    PWR->CR |= PWR_CR_DBP;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <RTC_WriteAccess+0x50>)
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <RTC_WriteAccess+0x50>)
 8000bb8:	6812      	ldr	r2, [r2, #0]
 8000bba:	2180      	movs	r1, #128	; 0x80
 8000bbc:	0049      	lsls	r1, r1, #1
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]

    // Enable write access
    RTC->WPR = 0xCA;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <RTC_WriteAccess+0x54>)
 8000bc4:	22ca      	movs	r2, #202	; 0xca
 8000bc6:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <RTC_WriteAccess+0x54>)
 8000bca:	2253      	movs	r2, #83	; 0x53
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0xFE;
    RTC->WPR = 0x64;

    PWR->CR &= ~PWR_CR_DBP;
  }
}
 8000bce:	e00b      	b.n	8000be8 <RTC_WriteAccess+0x48>
    RTC->WPR = 0xFE;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <RTC_WriteAccess+0x54>)
 8000bd2:	22fe      	movs	r2, #254	; 0xfe
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x64;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <RTC_WriteAccess+0x54>)
 8000bd8:	2264      	movs	r2, #100	; 0x64
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24
    PWR->CR &= ~PWR_CR_DBP;
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <RTC_WriteAccess+0x50>)
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <RTC_WriteAccess+0x50>)
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	4905      	ldr	r1, [pc, #20]	; (8000bf8 <RTC_WriteAccess+0x58>)
 8000be4:	400a      	ands	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40007000 	.word	0x40007000
 8000bf4:	40002800 	.word	0x40002800
 8000bf8:	fffffeff 	.word	0xfffffeff

08000bfc <GetTrueRandomNumber>:

uint32_t GetTrueRandomNumber()
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  //enable ADC1 clock
  RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000c02:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <GetTrueRandomNumber+0xc4>)
 8000c04:	4a2e      	ldr	r2, [pc, #184]	; (8000cc0 <GetTrueRandomNumber+0xc4>)
 8000c06:	6992      	ldr	r2, [r2, #24]
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	0089      	lsls	r1, r1, #2
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	619a      	str	r2, [r3, #24]

  //enable internal temperature sensor
  ADC->CCR |= (uint32_t)ADC_CCR_TSEN;
 8000c10:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <GetTrueRandomNumber+0xc8>)
 8000c12:	4a2c      	ldr	r2, [pc, #176]	; (8000cc4 <GetTrueRandomNumber+0xc8>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	0409      	lsls	r1, r1, #16
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	601a      	str	r2, [r3, #0]

  // Enable ADCperipheral
  ADC1->CR |= (uint32_t)ADC_CR_ADEN;
 8000c1e:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <GetTrueRandomNumber+0xcc>)
 8000c20:	4a29      	ldr	r2, [pc, #164]	; (8000cc8 <GetTrueRandomNumber+0xcc>)
 8000c22:	6892      	ldr	r2, [r2, #8]
 8000c24:	2101      	movs	r1, #1
 8000c26:	430a      	orrs	r2, r1
 8000c28:	609a      	str	r2, [r3, #8]
  while (!(ADC1->ISR & ADC_FLAG_ADRDY));
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <GetTrueRandomNumber+0xcc>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2201      	movs	r2, #1
 8000c32:	4013      	ands	r3, r2
 8000c34:	d0fa      	beq.n	8000c2c <GetTrueRandomNumber+0x30>

  // Enable CRC clock
  RCC->AHBENR |= RCC_AHBENR_CRCEN;
 8000c36:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <GetTrueRandomNumber+0xc4>)
 8000c38:	4a21      	ldr	r2, [pc, #132]	; (8000cc0 <GetTrueRandomNumber+0xc4>)
 8000c3a:	6952      	ldr	r2, [r2, #20]
 8000c3c:	2140      	movs	r1, #64	; 0x40
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	615a      	str	r2, [r3, #20]

  for (uint8_t i = 0; i < 8; i++)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
 8000c48:	e012      	b.n	8000c70 <GetTrueRandomNumber+0x74>
  {
    //Start ADC1 Software Conversion
    ADC1->CR |= (uint32_t)ADC_CR_ADSTART;
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <GetTrueRandomNumber+0xcc>)
 8000c4c:	4a1e      	ldr	r2, [pc, #120]	; (8000cc8 <GetTrueRandomNumber+0xcc>)
 8000c4e:	6892      	ldr	r2, [r2, #8]
 8000c50:	2104      	movs	r1, #4
 8000c52:	430a      	orrs	r2, r1
 8000c54:	609a      	str	r2, [r3, #8]

    //wait for conversion complete
    while (!(ADC1->ISR = (uint32_t)ADC_FLAG_EOC));
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <GetTrueRandomNumber+0xcc>)
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	601a      	str	r2, [r3, #0]

    CRC->DR = ADC1->DR;
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <GetTrueRandomNumber+0xd0>)
 8000c60:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <GetTrueRandomNumber+0xcc>)
 8000c62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000c64:	601a      	str	r2, [r3, #0]
  for (uint8_t i = 0; i < 8; i++)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	3201      	adds	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
 8000c70:	1dfb      	adds	r3, r7, #7
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b07      	cmp	r3, #7
 8000c76:	d9e8      	bls.n	8000c4a <GetTrueRandomNumber+0x4e>

    //clear EOC flag
//    ADC1->ISR = (uint32_t)ADC_FLAG_EOC;
  }

  CRC->DR = 0xBADA55E5;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <GetTrueRandomNumber+0xd0>)
 8000c7a:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <GetTrueRandomNumber+0xd4>)
 8000c7c:	601a      	str	r2, [r3, #0]
  uint32_t nValue = CRC->DR;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <GetTrueRandomNumber+0xd0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	603b      	str	r3, [r7, #0]

  // disable temperature sensor to save power
  ADC->CCR &= (uint32_t)(~ADC_CCR_TSEN);
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <GetTrueRandomNumber+0xc8>)
 8000c86:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <GetTrueRandomNumber+0xc8>)
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	4912      	ldr	r1, [pc, #72]	; (8000cd4 <GetTrueRandomNumber+0xd8>)
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]

  // ADC disable
  ADC1->CR |= (uint32_t)ADC_CR_ADDIS;
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <GetTrueRandomNumber+0xcc>)
 8000c92:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <GetTrueRandomNumber+0xcc>)
 8000c94:	6892      	ldr	r2, [r2, #8]
 8000c96:	2102      	movs	r1, #2
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	609a      	str	r2, [r3, #8]

  RCC->APB2ENR &= ~RCC_APB2Periph_ADC1;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <GetTrueRandomNumber+0xc4>)
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <GetTrueRandomNumber+0xc4>)
 8000ca0:	6992      	ldr	r2, [r2, #24]
 8000ca2:	490d      	ldr	r1, [pc, #52]	; (8000cd8 <GetTrueRandomNumber+0xdc>)
 8000ca4:	400a      	ands	r2, r1
 8000ca6:	619a      	str	r2, [r3, #24]
  RCC->AHBENR &= ~RCC_AHBENR_CRCEN;
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <GetTrueRandomNumber+0xc4>)
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <GetTrueRandomNumber+0xc4>)
 8000cac:	6952      	ldr	r2, [r2, #20]
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	438a      	bics	r2, r1
 8000cb2:	615a      	str	r2, [r3, #20]

  return nValue;
 8000cb4:	683b      	ldr	r3, [r7, #0]
}
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b002      	add	sp, #8
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40012708 	.word	0x40012708
 8000cc8:	40012400 	.word	0x40012400
 8000ccc:	40023000 	.word	0x40023000
 8000cd0:	bada55e5 	.word	0xbada55e5
 8000cd4:	ff7fffff 	.word	0xff7fffff
 8000cd8:	fffffdff 	.word	0xfffffdff

08000cdc <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  EXTI->PR = EXTI_PR_PR17;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <RTC_IRQHandler+0x38>)
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	0292      	lsls	r2, r2, #10
 8000ce6:	615a      	str	r2, [r3, #20]
  RTC_WriteAccess(true);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff ff59 	bl	8000ba0 <RTC_WriteAccess>
//  RTC->CR &= ~(RTC_CR_ALRAE | RTC_CR_ALRAIE);
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_ISR_ALRAF | RTC_ISR_INIT)& 0x0001FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <RTC_IRQHandler+0x3c>)
 8000cf0:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <RTC_IRQHandler+0x3c>)
 8000cf2:	68d2      	ldr	r2, [r2, #12]
 8000cf4:	21ff      	movs	r1, #255	; 0xff
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	4908      	ldr	r1, [pc, #32]	; (8000d1c <RTC_IRQHandler+0x40>)
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	60da      	str	r2, [r3, #12]
//  RTC_WriteAccess(false);
  RTC->ISR |= RTC_ISR_ALRAF;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <RTC_IRQHandler+0x3c>)
 8000d00:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <RTC_IRQHandler+0x3c>)
 8000d02:	68d2      	ldr	r2, [r2, #12]
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	60da      	str	r2, [r3, #12]
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	40010400 	.word	0x40010400
 8000d18:	40002800 	.word	0x40002800
 8000d1c:	fffffe7f 	.word	0xfffffe7f

08000d20 <Timer_Init>:
static volatile uint32_t g_nTicks = 0;

PtrSysTickCallback pSysTickCallback = 0;

void Timer_Init()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 8000d24:	f000 f922 	bl	8000f6c <SystemCoreClockUpdate>
//  {
//    /* Capture error */
//    while (1);
//  }

  TimerUs_Init();
 8000d28:	f000 f836 	bl	8000d98 <TimerUs_Init>
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <Timer_Delay_ms>:

void Timer_Delay_ms(uint32_t delay_ms)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  nDelayTimer = delay_ms;
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <Timer_Delay_ms+0x20>)
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	601a      	str	r2, [r3, #0]
  while (nDelayTimer);
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <Timer_Delay_ms+0x20>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1fb      	bne.n	8000d44 <Timer_Delay_ms+0x10>
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000040 	.word	0x20000040

08000d58 <SysTick_Handler>:
{
  pSysTickCallback = pFunction;
}

void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  g_nTicks++;
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <SysTick_Handler+0x34>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	1c5a      	adds	r2, r3, #1
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <SysTick_Handler+0x34>)
 8000d64:	601a      	str	r2, [r3, #0]
  if (nDelayTimer)
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <SysTick_Handler+0x38>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d004      	beq.n	8000d78 <SysTick_Handler+0x20>
  {
    nDelayTimer--;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <SysTick_Handler+0x38>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	1e5a      	subs	r2, r3, #1
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SysTick_Handler+0x38>)
 8000d76:	601a      	str	r2, [r3, #0]
  }

  if (pSysTickCallback)
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SysTick_Handler+0x3c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d002      	beq.n	8000d86 <SysTick_Handler+0x2e>
  {
    pSysTickCallback();
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SysTick_Handler+0x3c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4798      	blx	r3
  }
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000044 	.word	0x20000044
 8000d90:	20000040 	.word	0x20000040
 8000d94:	20000048 	.word	0x20000048

08000d98 <TimerUs_Init>:


// timer for us counting
void TimerUs_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  // Enable clock for TIM
  TIMER_US_CLK_ENABLE;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <TimerUs_Init+0x38>)
 8000d9e:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <TimerUs_Init+0x38>)
 8000da0:	69d2      	ldr	r2, [r2, #28]
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	0049      	lsls	r1, r1, #1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	61da      	str	r2, [r3, #28]
  TimerUs_Start();
 8000daa:	f000 f815 	bl	8000dd8 <TimerUs_Start>

#ifdef DEBUG
  RCC->APB2ENR |= RCC_APB2ENR_DBGMCUEN;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <TimerUs_Init+0x38>)
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <TimerUs_Init+0x38>)
 8000db2:	6992      	ldr	r2, [r2, #24]
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	03c9      	lsls	r1, r1, #15
 8000db8:	430a      	orrs	r2, r1
 8000dba:	619a      	str	r2, [r3, #24]
  DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM14_STOP | DBGMCU_APB1_FZ_DBG_RTC_STOP;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <TimerUs_Init+0x3c>)
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <TimerUs_Init+0x3c>)
 8000dc0:	6892      	ldr	r2, [r2, #8]
 8000dc2:	21a0      	movs	r1, #160	; 0xa0
 8000dc4:	00c9      	lsls	r1, r1, #3
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	609a      	str	r2, [r3, #8]
#endif
}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40015800 	.word	0x40015800

08000dd8 <TimerUs_Start>:

void TimerUs_Start(void)
{
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  TIMER_US->PSC = SystemCoreClock / 1000000; // 7 instructions
 8000ddc:	4c0d      	ldr	r4, [pc, #52]	; (8000e14 <TimerUs_Start+0x3c>)
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <TimerUs_Start+0x40>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	490e      	ldr	r1, [pc, #56]	; (8000e1c <TimerUs_Start+0x44>)
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff f991 	bl	800010c <__udivsi3>
 8000dea:	0003      	movs	r3, r0
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	8523      	strh	r3, [r4, #40]	; 0x28
  TIMER_US->CNT = 0;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <TimerUs_Start+0x3c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
  TIMER_US->EGR = TIM_EGR_UG;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <TimerUs_Start+0x3c>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	829a      	strh	r2, [r3, #20]
  TIMER_US->CR1 |= TIM_CR1_CEN;
 8000dfc:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <TimerUs_Start+0x3c>)
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <TimerUs_Start+0x3c>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	2101      	movs	r1, #1
 8000e06:	430b      	orrs	r3, r1
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	8013      	strh	r3, [r2, #0]
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bdb0      	pop	{r4, r5, r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	40002000 	.word	0x40002000
 8000e18:	20000010 	.word	0x20000010
 8000e1c:	000f4240 	.word	0x000f4240

08000e20 <TimerUs_GetMicroseconds>:

uint16_t TimerUs_GetMicroseconds(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
    return TIMER_US->CNT;
 8000e24:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <TimerUs_GetMicroseconds+0x10>)
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	b29b      	uxth	r3, r3
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40002000 	.word	0x40002000

08000e34 <TimerUs_Delay>:

void TimerUs_Delay(uint16_t microseconds)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	1dbb      	adds	r3, r7, #6
 8000e3e:	801a      	strh	r2, [r3, #0]
  TimerUs_Clear();
 8000e40:	f000 f81a 	bl	8000e78 <TimerUs_Clear>
  uint16_t t = TimerUs_GetMicroseconds() + microseconds;
 8000e44:	f7ff ffec 	bl	8000e20 <TimerUs_GetMicroseconds>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	230e      	movs	r3, #14
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	1dba      	adds	r2, r7, #6
 8000e52:	8812      	ldrh	r2, [r2, #0]
 8000e54:	188a      	adds	r2, r1, r2
 8000e56:	801a      	strh	r2, [r3, #0]
  while (TimerUs_GetMicroseconds() < t)
 8000e58:	e000      	b.n	8000e5c <TimerUs_Delay+0x28>
  {
    continue;
 8000e5a:	46c0      	nop			; (mov r8, r8)
  while (TimerUs_GetMicroseconds() < t)
 8000e5c:	f7ff ffe0 	bl	8000e20 <TimerUs_GetMicroseconds>
 8000e60:	0003      	movs	r3, r0
 8000e62:	001a      	movs	r2, r3
 8000e64:	230e      	movs	r3, #14
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d8f5      	bhi.n	8000e5a <TimerUs_Delay+0x26>
  }
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b004      	add	sp, #16
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <TimerUs_Clear>:

void TimerUs_Clear(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  TIMER_US->CNT = 0;
 8000e7c:	4b02      	ldr	r3, [pc, #8]	; (8000e88 <TimerUs_Clear+0x10>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40002000 	.word	0x40002000

08000e8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e90:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e92:	e003      	b.n	8000e9c <LoopCopyDataInit>

08000e94 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000e96:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e98:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e9a:	3104      	adds	r1, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e9c:	480b      	ldr	r0, [pc, #44]	; (8000ecc <LoopForever+0xa>)
  ldr r3, =_edata
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <LoopForever+0xe>)
  adds r2, r0, r1
 8000ea0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ea2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ea4:	d3f6      	bcc.n	8000e94 <CopyDataInit>
  ldr r2, =_sbss
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <LoopForever+0x12>)
  b LoopFillZerobss
 8000ea8:	e002      	b.n	8000eb0 <LoopFillZerobss>

08000eaa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  str  r3, [r2]
 8000eac:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eae:	3204      	adds	r2, #4

08000eb0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <LoopForever+0x16>)
  cmp r2, r3
 8000eb2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000eb4:	d3f9      	bcc.n	8000eaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eb6:	f000 f813 	bl	8000ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eba:	f000 f8c1 	bl	8001040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ebe:	f7ff fd05 	bl	80008cc <main>

08000ec2 <LoopForever>:
  
LoopForever:
    b LoopForever
 8000ec2:	e7fe      	b.n	8000ec2 <LoopForever>
  ldr   r0, =_estack
 8000ec4:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8000ec8:	080010a8 	.word	0x080010a8
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ed0:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8000ed4:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8000ed8:	2000004c 	.word	0x2000004c

08000edc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_COMP_IRQHandler>
	...

08000ee0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <SystemInit+0x74>)
 8000ee6:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <SystemInit+0x74>)
 8000ee8:	6812      	ldr	r2, [r2, #0]
 8000eea:	2101      	movs	r1, #1
 8000eec:	430a      	orrs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
#if defined (STM32F031) || defined (STM32F072) || defined (STM32F042) 
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <SystemInit+0x74>)
 8000ef2:	4a18      	ldr	r2, [pc, #96]	; (8000f54 <SystemInit+0x74>)
 8000ef4:	6852      	ldr	r2, [r2, #4]
 8000ef6:	4918      	ldr	r1, [pc, #96]	; (8000f58 <SystemInit+0x78>)
 8000ef8:	400a      	ands	r2, r1
 8000efa:	605a      	str	r2, [r3, #4]
#endif /* STM32F031*/
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <SystemInit+0x74>)
 8000efe:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <SystemInit+0x74>)
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	4916      	ldr	r1, [pc, #88]	; (8000f5c <SystemInit+0x7c>)
 8000f04:	400a      	ands	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <SystemInit+0x74>)
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <SystemInit+0x74>)
 8000f0c:	6812      	ldr	r2, [r2, #0]
 8000f0e:	4914      	ldr	r1, [pc, #80]	; (8000f60 <SystemInit+0x80>)
 8000f10:	400a      	ands	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <SystemInit+0x74>)
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <SystemInit+0x74>)
 8000f18:	6852      	ldr	r2, [r2, #4]
 8000f1a:	4912      	ldr	r1, [pc, #72]	; (8000f64 <SystemInit+0x84>)
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <SystemInit+0x74>)
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <SystemInit+0x74>)
 8000f24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f26:	210f      	movs	r1, #15
 8000f28:	438a      	bics	r2, r1
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <SystemInit+0x74>)
 8000f2e:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <SystemInit+0x74>)
 8000f30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f32:	490d      	ldr	r1, [pc, #52]	; (8000f68 <SystemInit+0x88>)
 8000f34:	400a      	ands	r2, r1
 8000f36:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <SystemInit+0x74>)
 8000f3a:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <SystemInit+0x74>)
 8000f3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f3e:	2101      	movs	r1, #1
 8000f40:	438a      	bics	r2, r1
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <SystemInit+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  // kdyz clock nenastavime, tak pojedeme na HSI 8MHz
//  SetSysClock();
  SystemCoreClockUpdate();
 8000f4a:	f000 f80f 	bl	8000f6c <SystemCoreClockUpdate>
}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	08ffb80c 	.word	0x08ffb80c
 8000f5c:	fef6ffff 	.word	0xfef6ffff
 8000f60:	fffbffff 	.word	0xfffbffff
 8000f64:	ffc0ffff 	.word	0xffc0ffff
 8000f68:	fffffeac 	.word	0xfffffeac

08000f6c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <SystemCoreClockUpdate+0xc0>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	220c      	movs	r2, #12
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d007      	beq.n	8000fa2 <SystemCoreClockUpdate+0x36>
 8000f92:	2b08      	cmp	r3, #8
 8000f94:	d009      	beq.n	8000faa <SystemCoreClockUpdate+0x3e>
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d131      	bne.n	8000ffe <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <SystemCoreClockUpdate+0xc4>)
 8000f9c:	4a25      	ldr	r2, [pc, #148]	; (8001034 <SystemCoreClockUpdate+0xc8>)
 8000f9e:	601a      	str	r2, [r3, #0]
      break;
 8000fa0:	e031      	b.n	8001006 <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000fa2:	4b23      	ldr	r3, [pc, #140]	; (8001030 <SystemCoreClockUpdate+0xc4>)
 8000fa4:	4a23      	ldr	r2, [pc, #140]	; (8001034 <SystemCoreClockUpdate+0xc8>)
 8000fa6:	601a      	str	r2, [r3, #0]
      break;
 8000fa8:	e02d      	b.n	8001006 <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000faa:	4b20      	ldr	r3, [pc, #128]	; (800102c <SystemCoreClockUpdate+0xc0>)
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	23f0      	movs	r3, #240	; 0xf0
 8000fb0:	039b      	lsls	r3, r3, #14
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <SystemCoreClockUpdate+0xc0>)
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	025b      	lsls	r3, r3, #9
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	0c9b      	lsrs	r3, r3, #18
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d105      	bne.n	8000fdc <SystemCoreClockUpdate+0x70>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4a19      	ldr	r2, [pc, #100]	; (8001038 <SystemCoreClockUpdate+0xcc>)
 8000fd4:	435a      	muls	r2, r3
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <SystemCoreClockUpdate+0xc4>)
 8000fd8:	601a      	str	r2, [r3, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 8000fda:	e014      	b.n	8001006 <SystemCoreClockUpdate+0x9a>
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <SystemCoreClockUpdate+0xc0>)
 8000fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	603b      	str	r3, [r7, #0]
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8000fe8:	6839      	ldr	r1, [r7, #0]
 8000fea:	4812      	ldr	r0, [pc, #72]	; (8001034 <SystemCoreClockUpdate+0xc8>)
 8000fec:	f7ff f88e 	bl	800010c <__udivsi3>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	435a      	muls	r2, r3
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <SystemCoreClockUpdate+0xc4>)
 8000ffa:	601a      	str	r2, [r3, #0]
      break;
 8000ffc:	e003      	b.n	8001006 <SystemCoreClockUpdate+0x9a>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <SystemCoreClockUpdate+0xc4>)
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <SystemCoreClockUpdate+0xc8>)
 8001002:	601a      	str	r2, [r3, #0]
      break;
 8001004:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <SystemCoreClockUpdate+0xc0>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	220f      	movs	r2, #15
 800100e:	4013      	ands	r3, r2
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <SystemCoreClockUpdate+0xd0>)
 8001012:	5cd3      	ldrb	r3, [r2, r3]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SystemCoreClockUpdate+0xc4>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	40da      	lsrs	r2, r3
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <SystemCoreClockUpdate+0xc4>)
 8001022:	601a      	str	r2, [r3, #0]
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b004      	add	sp, #16
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000
 8001030:	20000010 	.word	0x20000010
 8001034:	007a1200 	.word	0x007a1200
 8001038:	003d0900 	.word	0x003d0900
 800103c:	20000014 	.word	0x20000014

08001040 <__libc_init_array>:
 8001040:	b570      	push	{r4, r5, r6, lr}
 8001042:	2600      	movs	r6, #0
 8001044:	4d0c      	ldr	r5, [pc, #48]	; (8001078 <__libc_init_array+0x38>)
 8001046:	4c0d      	ldr	r4, [pc, #52]	; (800107c <__libc_init_array+0x3c>)
 8001048:	1b64      	subs	r4, r4, r5
 800104a:	10a4      	asrs	r4, r4, #2
 800104c:	42a6      	cmp	r6, r4
 800104e:	d109      	bne.n	8001064 <__libc_init_array+0x24>
 8001050:	2600      	movs	r6, #0
 8001052:	f000 f819 	bl	8001088 <_init>
 8001056:	4d0a      	ldr	r5, [pc, #40]	; (8001080 <__libc_init_array+0x40>)
 8001058:	4c0a      	ldr	r4, [pc, #40]	; (8001084 <__libc_init_array+0x44>)
 800105a:	1b64      	subs	r4, r4, r5
 800105c:	10a4      	asrs	r4, r4, #2
 800105e:	42a6      	cmp	r6, r4
 8001060:	d105      	bne.n	800106e <__libc_init_array+0x2e>
 8001062:	bd70      	pop	{r4, r5, r6, pc}
 8001064:	00b3      	lsls	r3, r6, #2
 8001066:	58eb      	ldr	r3, [r5, r3]
 8001068:	4798      	blx	r3
 800106a:	3601      	adds	r6, #1
 800106c:	e7ee      	b.n	800104c <__libc_init_array+0xc>
 800106e:	00b3      	lsls	r3, r6, #2
 8001070:	58eb      	ldr	r3, [r5, r3]
 8001072:	4798      	blx	r3
 8001074:	3601      	adds	r6, #1
 8001076:	e7f2      	b.n	800105e <__libc_init_array+0x1e>
 8001078:	080010a0 	.word	0x080010a0
 800107c:	080010a0 	.word	0x080010a0
 8001080:	080010a0 	.word	0x080010a0
 8001084:	080010a4 	.word	0x080010a4

08001088 <_init>:
 8001088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800108e:	bc08      	pop	{r3}
 8001090:	469e      	mov	lr, r3
 8001092:	4770      	bx	lr

08001094 <_fini>:
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109a:	bc08      	pop	{r3}
 800109c:	469e      	mov	lr, r3
 800109e:	4770      	bx	lr
